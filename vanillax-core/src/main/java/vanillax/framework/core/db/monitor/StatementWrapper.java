package vanillax.framework.core.db.monitor;

import java.sql.*;
import java.text.DecimalFormat;
import java.util.logging.Logger;

public class StatementWrapper extends JdbcBaseWrapper implements Statement{
    private static Logger log = Logger.getLogger(StatementWrapper.class.getName());
    private Statement statement;
    private long startTime = 0;
    private DecimalFormat formatter = null;

    public StatementWrapper(Statement statement){
        super();
        this.statement = statement;
        startTime = System.currentTimeMillis();
        formatter = new DecimalFormat("#,###");
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        long t1 = System.currentTimeMillis();
        log.info("Execution Query ["+this.id+"] : " + sql);
        ResultSet rs = new ResultSetWrapper(statement.executeQuery(sql), this.id);
        long duration = System.currentTimeMillis() - t1;
        log.info("Query Execution Time ["+this.id+"] : " + formatter.format(duration) + " ms");
        return rs;
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        long t1 = System.currentTimeMillis();
        log.info("Execution Query ["+this.id+"] : " + sql);
        int result = statement.executeUpdate(sql);
        long duration = System.currentTimeMillis() - t1;
        log.info("Query Execution Time ["+this.id+"] : " + formatter.format(duration) + " ms");
        return result;
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        long t1 = System.currentTimeMillis();
        log.info("Execution Query ["+this.id+"] : " + sql);
        int result = statement.executeUpdate(sql, autoGeneratedKeys);
        long duration = System.currentTimeMillis() - t1;
        log.info("Query Execution Time ["+this.id+"] : " + formatter.format(duration) + " ms");
        return result;
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        long t1 = System.currentTimeMillis();
        log.info("Execution Query ["+this.id+"] : " + sql);
        int result = statement.executeUpdate(sql, columnIndexes);
        long duration = System.currentTimeMillis() - t1;
        log.info("Query Execution Time ["+this.id+"] : " + formatter.format(duration) + " ms");
        return result;
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        long t1 = System.currentTimeMillis();
        log.info("Execution Query ["+this.id+"] : " + sql);
        int result = statement.executeUpdate(sql, columnNames);
        long duration = System.currentTimeMillis() - t1;
        log.info("Query Execution Time ["+this.id+"] : " + formatter.format(duration) + " ms");
        return result;
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        long t1 = System.currentTimeMillis();
        log.info("Execution Query ["+this.id+"] : " + sql);
        boolean result = statement.execute(sql, autoGeneratedKeys);
        long duration = System.currentTimeMillis() - t1;
        log.info("Query Execution Time ["+this.id+"] : " + formatter.format(duration) + " ms");
        return result;
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        long t1 = System.currentTimeMillis();
        log.info("Execution Query ["+this.id+"] : " + sql);
        boolean result = statement.execute(sql, columnIndexes);
        long duration = System.currentTimeMillis() - t1;
        log.info("Query Execution Time ["+this.id+"] : " + formatter.format(duration) + " ms");
        return result;
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        long t1 = System.currentTimeMillis();
        log.info("Execution Query ["+this.id+"] : " + sql);
        boolean result = statement.execute(sql, columnNames);
        long duration = System.currentTimeMillis() - t1;
        log.info("Query Execution Time ["+this.id+"] : " + formatter.format(duration) + " ms");
        return result;
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        long t1 = System.currentTimeMillis();
        log.info("Execution Query ["+this.id+"] : " + sql);
        boolean result = statement.execute(sql);
        long duration = System.currentTimeMillis() - t1;
        log.info("Query Execution Time ["+this.id+"] : " + formatter.format(duration) + " ms");
        return result;
    }

    @Override
    public int[] executeBatch() throws SQLException {
        return statement.executeBatch();
    }

    @Override
    public long[] executeLargeBatch() throws SQLException {
        return statement.executeLargeBatch();
    }

    @Override
    public long executeLargeUpdate(String sql) throws SQLException {
        long t1 = System.currentTimeMillis();
        long result = statement.executeLargeUpdate(sql);
        long duration = System.currentTimeMillis() - t1;
        log.info("Execution Query : "+sql);
        log.info("Query Execution Time : " + formatter.format(duration) + " ms");
        return result;
    }

    @Override
    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        long t1 = System.currentTimeMillis();
        long result = statement.executeLargeUpdate(sql, autoGeneratedKeys);
        long duration = System.currentTimeMillis() - t1;
        log.info("Execution Query : "+sql);
        log.info("Query Execution Time : " + formatter.format(duration) + " ms");
        return result;
    }

    @Override
    public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
        long t1 = System.currentTimeMillis();
        long result = statement.executeLargeUpdate(sql, columnIndexes);
        long duration = System.currentTimeMillis() - t1;
        log.info("Execution Query : "+sql);
        log.info("Query Execution Time : " + formatter.format(duration) + " ms");
        return result;
    }

    @Override
    public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {
        long t1 = System.currentTimeMillis();
        long result = statement.executeLargeUpdate(sql, columnNames);
        long duration = System.currentTimeMillis() - t1;
        log.info("Execution Query : "+sql);
        log.info("Query Execution Time : " + formatter.format(duration) + " ms");
        return result;
    }

    @Override
    public void close() throws SQLException {
        statement.close();
        long duration = (System.currentTimeMillis() - this.startTime);
        log.info("Statement closed ["+this.id+"] : "+ formatter.format(duration) + " ms");
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return statement.getMaxFieldSize();
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        statement.setMaxFieldSize(max);
    }

    @Override
    public int getMaxRows() throws SQLException {
        return statement.getMaxRows();
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        statement.setMaxRows(max);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        statement.setEscapeProcessing(enable);
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return statement.getQueryTimeout();
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        statement.setQueryTimeout(seconds);
    }

    @Override
    public void cancel() throws SQLException {
        statement.cancel();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return statement.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        statement.clearWarnings();
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        statement.setCursorName(name);
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return statement.getResultSet();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return statement.getUpdateCount();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return statement.getMoreResults();
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        statement.setFetchDirection(direction);
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return statement.getFetchDirection();
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        statement.setFetchSize(rows);
    }

    @Override
    public int getFetchSize() throws SQLException {
        return statement.getFetchSize();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return statement.getResultSetConcurrency();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return statement.getResultSetType();
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        statement.addBatch(sql);
    }

    @Override
    public void clearBatch() throws SQLException {
        statement.clearBatch();
    }

    @Override
    public Connection getConnection() throws SQLException {
        return statement.getConnection();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return statement.getMoreResults(current);
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return statement.getGeneratedKeys();
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return statement.getResultSetHoldability();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return statement.isClosed();
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        statement.setPoolable(poolable);
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return statement.isPoolable();
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        statement.closeOnCompletion();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return statement.isCloseOnCompletion();
    }

    @Override
    public long getLargeUpdateCount() throws SQLException {
        return statement.getLargeUpdateCount();
    }

    @Override
    public void setLargeMaxRows(long max) throws SQLException {
        statement.setLargeMaxRows(max);
    }

    @Override
    public long getLargeMaxRows() throws SQLException {
        return statement.getLargeMaxRows();
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return statement.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return statement.isWrapperFor(iface);
    }
}
